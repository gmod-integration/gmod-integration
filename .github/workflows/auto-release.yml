name: Auto Release

on:
    push:
        branches: [main, master]
    workflow_dispatch:
        inputs:
            version_type:
                description: 'Version bump type'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major

permissions:
    contents: write
    pull-requests: write

jobs:
    version:
        name: Calculate Version & Update Code
        runs-on: ubuntu-latest
        outputs:
            new_version: ${{ steps.calc_version.outputs.new_version }}
            new_tag: ${{ steps.calc_version.outputs.new_tag }}
            latest_tag: ${{ steps.get_tag.outputs.latest_tag }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Get latest tag
              id: get_tag
              run: |
                  git fetch --tags
                  LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                  echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
                  echo "Latest tag: $LATEST_TAG"

            - name: Calculate new version
              id: calc_version
              run: |
                  LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
                  VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"

                  # Remove 'v' prefix if present
                  VERSION=${LATEST_TAG#v}

                  # Split version into parts
                  IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
                  MAJOR=${VERSION_PARTS[0]:-0}
                  MINOR=${VERSION_PARTS[1]:-0}
                  PATCH=${VERSION_PARTS[2]:-0}

                  # Increment based on type
                  case $VERSION_TYPE in
                    major)
                      MAJOR=$((MAJOR + 1))
                      MINOR=0
                      PATCH=0
                      ;;
                    minor)
                      MINOR=$((MINOR + 1))
                      PATCH=0
                      ;;
                    patch)
                      PATCH=$((PATCH + 1))
                      ;;
                  esac

                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  NEW_TAG="v$NEW_VERSION"

                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
                  echo "New version: $NEW_VERSION"

            - name: Update version in code
              run: |
                  NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
                  sed -i "s/gmInte\.version = \"[^\"]*\"/gmInte.version = \"$NEW_VERSION\"/g" lua/autorun/gmod_integration.lua
                  grep "gmInte.version" lua/autorun/gmod_integration.lua

            - name: Commit and tag
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add lua/autorun/gmod_integration.lua
                  git commit -m "chore: bump version to ${{ steps.calc_version.outputs.new_version }}" || exit 0

                  NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
                  git tag $NEW_TAG
                  git push origin $NEW_TAG
                  git push origin HEAD

    changelog:
        name: Generate Changelog
        runs-on: ubuntu-latest
        needs: version
        outputs:
            changelog: ${{ steps.changelog.outputs.changelog }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Generate changelog
              id: changelog
              run: |
                  LATEST_TAG="${{ needs.version.outputs.latest_tag }}"
                  NEW_TAG="${{ needs.version.outputs.new_tag }}"

                  echo "## What's Changed" > CHANGELOG.md
                  echo "" >> CHANGELOG.md

                  if [ "$LATEST_TAG" != "v0.0.0" ]; then
                    git log --pretty=format:"* %s (%h)" $LATEST_TAG..HEAD >> CHANGELOG.md
                  else
                    git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
                  fi

                  echo "" >> CHANGELOG.md
                  echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_TAG" >> CHANGELOG.md

                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  cat CHANGELOG.md >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

    build:
        name: Build Release Archive
        runs-on: ubuntu-latest
        needs: version
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Create release archive
              run: |
                  mkdir -p gmod-integration-release/addons/gmod-integration
                  cp -r lua/ gmod-integration-release/addons/gmod-integration/
                  [ -f LICENSE ] && cp LICENSE gmod-integration-release/addons/gmod-integration/

                  # Copy README.md to both addon folder and root of zip
                  [ -f README.md ] && cp README.md gmod-integration-release/addons/gmod-integration/
                  [ -f README.md ] && cp README.md gmod-integration-release/

                  cat > gmod-integration-release/addons/gmod-integration/addon.json << EOF
                  {
                    "title": "Gmod Integration",
                    "type": "ServerContent",
                    "tags": ["fun", "roleplay"],
                    "ignore": [
                      "*.git*",
                      "*.md",
                      "*.yml",
                      "*.yaml"
                    ]
                  }
                  EOF

                  cd gmod-integration-release
                  zip -r ../gmod-integration-${{ needs.version.outputs.new_version }}.zip .
                  cd ..

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: release-archive
                  path: gmod-integration-${{ needs.version.outputs.new_version }}.zip

    github-release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: [version, changelog, build]
        steps:
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: release-archive

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ needs.version.outputs.new_tag }}
                  name: ${{ needs.version.outputs.new_tag }}
                  body: ${{ needs.changelog.outputs.changelog }}
                  files: |
                      gmod-integration-${{ needs.version.outputs.new_version }}.zip
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    gmodstore-release:
        name: Publish to GMod Store
        runs-on: ubuntu-latest
        needs: [version, changelog, build, github-release]
        if: success()
        steps:
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: release-archive

            - name: Publish to GMod Store
              run: |
                  NEW_VERSION="${{ needs.version.outputs.new_version }}"
                  CHANGELOG="${{ needs.changelog.outputs.changelog }}"

                  # Prepare changelog for API
                  API_CHANGELOG=$(echo "$CHANGELOG" | sed 's/## What'\''s Changed/What'\''s Changed:/g' | sed 's/\*\*Full Changelog\*\*/Full Changelog:/g' | head -c 9000)

                  # Upload to GMod Store
                  curl -X POST "https://api.pivity.com/v3/products/${{ secrets.GMODSTORE_PRODUCT_ID }}/versions" \
                    -H "Authorization: Bearer ${{ secrets.GMODSTORE_API_TOKEN }}" \
                    -F "name=v$NEW_VERSION" \
                    -F "changelog=$API_CHANGELOG" \
                    -F "file=@gmod-integration-$NEW_VERSION.zip" \
                    -F "releaseType=stable" \
                    --fail-with-body || echo "Failed to publish to GMod Store - check your API token and product ID"
              env:
                  GMODSTORE_API_TOKEN: ${{ secrets.GMODSTORE_API_TOKEN }}
                  GMODSTORE_PRODUCT_ID: ${{ secrets.GMODSTORE_PRODUCT_ID }}

    publish_workshop:
        name: Publish to Steam Workshop
        runs-on: ubuntu-latest
        needs: [build, version, changelog]

        steps:
            # 1) Checkout your addon code
            - name: Checkout gmod-integration
              uses: actions/checkout@v4

            # 2) Checkout the “uploader” repo into a sub-folder
            - name: Checkout gmod-workshop-cicd
              uses: actions/checkout@v4
              with:
                  repository: linventif/gmod-workshop-cicd
                  path: gmod-workshop-cicd
                  token: ${{ secrets.GITHUB_TOKEN }}

            # 3) Build the uploader image from that repo
            - name: Build gmod-uploader image
              run: |
                  docker build -t gmod-uploader ./gmod-workshop-cicd

            # 4) Generate Steam Guard OTP
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'

            - name: Install steampy
              run: pip install steampy

            - name: Generate Steam Guard OTP
              id: steam_otp
              run: echo "otp=$(python3 otp.py)" >> $GITHUB_OUTPUT
              working-directory: ${{ github.workspace }}/gmod-workshop-cicd

            # 5) Publish to Steam Workshop, with change notes from your GMod Store changelog
            - name: Publish to Workshop
              env:
                  STEAM_USER: ${{ secrets.STEAM_USER }}
                  STEAM_PASS: ${{ secrets.STEAM_PASS }}
                  STEAM_GUARD: ${{ steps.steam_otp.outputs.otp }}
                  PUBLISHED_FILE_ID: ${{ secrets.GMOD_INTEGRATION_PUBLISHED_FILE_ID }}
                  CONTENT_PATH: /data
                  TITLE: Gmod Integration v${{ needs.version.outputs.new_version }}
                  DESCRIPTION: 'Workshop Content of gmod-integration.com – all information on the website.'
                  VISIBILITY: '0'
                  CHANGE_NOTE: |
                      ${{ needs.changelog.outputs.changelog }}
              run: |
                  docker run --rm \
                    -e STEAM_USER \
                    -e STEAM_PASS \
                    -e STEAM_GUARD \
                    -e CONTENT_PATH \
                    -e TITLE \
                    -e DESCRIPTION \
                    -e VISIBILITY \
                    -e CHANGE_NOTE \
                    -e PUBLISHED_FILE_ID \
                    -v ${{ github.workspace }}/example_addon:/data \
                    gmod-uploader
