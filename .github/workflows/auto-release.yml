name: Auto Release

on:
    push:
        branches: [main, master]
    workflow_dispatch:
        inputs:
            version_type:
                description: 'Version bump type'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            - name: Get latest tag
              id: get_tag
              run: |
                  git fetch --tags
                  LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                  echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
                  echo "Latest tag: $LATEST_TAG"

            - name: Calculate new version
              id: calc_version
              run: |
                  LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
                  VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"

                  # Remove 'v' prefix if present
                  VERSION=${LATEST_TAG#v}

                  # Split version into parts
                  IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
                  MAJOR=${VERSION_PARTS[0]:-0}
                  MINOR=${VERSION_PARTS[1]:-0}
                  PATCH=${VERSION_PARTS[2]:-0}

                  # Increment based on type
                  case $VERSION_TYPE in
                    major)
                      MAJOR=$((MAJOR + 1))
                      MINOR=0
                      PATCH=0
                      ;;
                    minor)
                      MINOR=$((MINOR + 1))
                      PATCH=0
                      ;;
                    patch)
                      PATCH=$((PATCH + 1))
                      ;;
                  esac

                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  NEW_TAG="v$NEW_VERSION"

                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
                  echo "New version: $NEW_VERSION"

            - name: Update version in code
              run: |
                  NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"

                  # Update version in the main file
                  sed -i "s/gmInte\.version = \"[^\"]*\"/gmInte.version = \"$NEW_VERSION\"/g" lua/autorun/gmod_integration.lua

                  # Verify the change
                  grep "gmInte.version" lua/autorun/gmod_integration.lua

            - name: Commit version update
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add lua/autorun/gmod_integration.lua
                  git commit -m "chore: bump version to ${{ steps.calc_version.outputs.new_version }}" || exit 0

            - name: Create and push tag
              run: |
                  NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
                  git tag $NEW_TAG
                  git push origin $NEW_TAG
                  git push origin HEAD

            - name: Generate changelog
              id: changelog
              run: |
                  LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
                  NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"

                  echo "## What's Changed" > CHANGELOG.md
                  echo "" >> CHANGELOG.md

                  if [ "$LATEST_TAG" != "v0.0.0" ]; then
                    git log --pretty=format:"* %s (%h)" $LATEST_TAG..HEAD >> CHANGELOG.md
                  else
                    git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
                  fi

                  echo "" >> CHANGELOG.md
                  echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_TAG" >> CHANGELOG.md

                  # Set output for release body
                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  cat CHANGELOG.md >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create release archive
              run: |
                  # Create a clean directory structure for the addon
                  mkdir -p gmod-integration-release/addons/gmod-integration

                  # Copy all lua files
                  cp -r lua/ gmod-integration-release/addons/gmod-integration/

                  # Copy other necessary files if they exist
                  [ -f README.md ] && cp README.md gmod-integration-release/addons/gmod-integration/
                  [ -f LICENSE ] && cp LICENSE gmod-integration-release/addons/gmod-integration/

                  # Create addon.json
                  cat > gmod-integration-release/addons/gmod-integration/addon.json << EOF
                  {
                    "title": "Gmod Integration",
                    "type": "ServerContent",
                    "tags": ["fun", "roleplay"],
                    "ignore": [
                      "*.git*",
                      "*.md",
                      "*.yml",
                      "*.yaml"
                    ]
                  }
                  EOF

                  # Create zip archive
                  cd gmod-integration-release
                  zip -r ../gmod-integration-${{ steps.calc_version.outputs.new_version }}.zip .
                  cd ..

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.calc_version.outputs.new_tag }}
                  name: Release ${{ steps.calc_version.outputs.new_tag }}
                  body: ${{ steps.changelog.outputs.changelog }}
                  files: |
                      gmod-integration-${{ steps.calc_version.outputs.new_version }}.zip
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
